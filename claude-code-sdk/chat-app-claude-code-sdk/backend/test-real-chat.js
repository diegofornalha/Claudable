const io = require('socket.io-client');

console.log('üöÄ Iniciando teste de chat...');

// Conectar ao servidor
const socket = io('http://localhost:8080', {
  transports: ['websocket'],
  reconnection: true
});

let messageReceived = false;

socket.on('connect', () => {
  console.log('‚úÖ Conectado ao servidor com ID:', socket.id);
  
  // Aguardar um momento para garantir conex√£o est√°vel
  setTimeout(() => {
    // Enviar mensagem de chat real
    const testMessage = {
      sessionId: 'test-session-' + Date.now(),
      message: 'Ol√°! Voc√™ est√° funcionando corretamente?'
    };
    
    console.log('üì§ Enviando mensagem:', testMessage);
    socket.emit('send_message', testMessage);
  }, 500);
});

socket.on('user_message', (data) => {
  console.log('üë§ Mensagem do usu√°rio confirmada:', data);
});

socket.on('typing_start', () => {
  console.log('‚å®Ô∏è Claude est√° digitando...');
});

socket.on('stream', (data) => {
  if (!messageReceived) {
    console.log('\nüìù Resposta do Claude:');
    messageReceived = true;
  }
  process.stdout.write(data.text || '');
});

socket.on('message_complete', (data) => {
  console.log('\n\n‚úÖ Mensagem completa!');
  console.log('üìä Estat√≠sticas:', {
    messageId: data.messageId,
    sessionId: data.sessionId,
    totalTokens: data.totalTokens,
    timestamp: new Date(data.timestamp).toLocaleString()
  });
  console.log('\nüéâ Teste conclu√≠do com sucesso!');
  process.exit(0);
});

socket.on('error', (error) => {
  console.error('\n‚ùå Erro recebido:', error);
  if (error.content) {
    console.error('Detalhes do erro:', error.content);
  }
  process.exit(1);
});

socket.on('disconnect', () => {
  console.log('üîå Desconectado do servidor');
});

socket.on('connect_error', (error) => {
  console.error('‚ùå Erro de conex√£o:', error.message);
});

// Timeout de 30 segundos
setTimeout(() => {
  console.log('\n‚è∞ Timeout - teste levou muito tempo');
  console.log('Status: ', messageReceived ? 'Resposta parcial recebida' : 'Nenhuma resposta recebida');
  process.exit(messageReceived ? 0 : 1);
}, 30000);